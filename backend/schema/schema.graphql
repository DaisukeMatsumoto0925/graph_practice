schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createTask(input: NewTask!): Task! @hasRole(role: ADMIN)
  updateTask(input: UpdateTask!): Task! @hasRole(role: ADMIN)
  joinUser(input: JoinUserInput!): User!
  postMessage(input: PostMessageInput!): Message!

  uploadFile(input: UploadFileInput!): UploadFilePayload!
}

type Query {
  tasks(input: PaginationInput!): TaskConnection!
  task(id: ID!): Task!
}

type Subscription {
  messagePosted(userID: ID): Message!
  userJoined(userID: ID): User!
}

interface Node {
  id: ID!
}

scalar Time
scalar Upload

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  USER
}
