# type Task implements Node {
#   id: ID!
#   title: String!
#   note: String!
#   completed: Int! # 0 or 1
#   created_at: Time!
#   updated_at: Time!
# }

type Task {
  id: ID!
  title: String!
  note: String!
  completed: Int! # 0 or 1
  created_at: Time!
  updated_at: Time!
}

input NewTask {
  title: String!
  note: String!
}

type Mutation {
  createTask(input: NewTask!): Task!
}

type Query {
  # tasks(
  #   input: TasksInput!
  #   orderBy: TaskOrderFields!
  #   page: PaginationInput!
  # ): TaskConnection!
  tasks: [Task]!
}

# input TasksInput {
#   completed: Boolean
# }

# enum TaskOrderFields {
#   LATEST
#   TITLE
# }

# type TaskEdge implements Edge {
#   cursor: String!
#   node: Task!
# }

# type TaskConnection implements Connection {
#   pageInfo: PageInfo!
#   edges: [TaskEdge]!
# }

scalar Time
